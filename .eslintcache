[{"C:\\Users\\SOURAV\\Desktop\\CT Solutions Internship\\TypeScript Practice\\trello-table\\src\\App.tsx":"1","C:\\Users\\SOURAV\\Desktop\\CT Solutions Internship\\TypeScript Practice\\trello-table\\src\\reportWebVitals.ts":"2","C:\\Users\\SOURAV\\Desktop\\CT Solutions Internship\\TypeScript Practice\\trello-table\\src\\index.tsx":"3"},{"size":14795,"mtime":1606799113010,"results":"4","hashOfConfig":"5"},{"size":425,"mtime":499162500000,"results":"6","hashOfConfig":"5"},{"size":500,"mtime":499162500000,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"10"},"13tv6qo",{"filePath":"11","messages":"12","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"13","messages":"14","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\SOURAV\\Desktop\\CT Solutions Internship\\TypeScript Practice\\trello-table\\src\\App.tsx",["15","16","17","18","19","20","21","22","23","24","25"],"import React, { useState, useEffect, ReactNode, ChangeEvent } from \"react\";\nimport \"./App.css\";\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\nimport _ from \"lodash\";\nimport { v4 } from \"uuid\";\nimport $ from \"jquery\";\n\ninterface IProps {\n  destination: ReactNode;\n  source: ReactNode;\n}\n\ninterface commentsData {\n  Name: string;\n  commment: string;\n}\n\ninterface item {\n  id: string;\n  name: string;\n  date: string;\n  comments: [commentsData];\n}\ninterface DataSet {\n  todo: {\n    title: \"Todo\";\n    items: [item];\n  };\n  inprogress: {\n    title: \"Progress\";\n    items: [];\n  };\n  done: {\n    title: \"Completed\";\n    items: [];\n  };\n}\n\nconst item = {\n  id: v4(),\n  name: \"Fill the water bottles\",\n  date: \"2020-11-30\",\n  comments: [],\n};\n\nfunction App() {\n  const [newItemModal, setNewItemModal] = useState<string>(\"\");\n  const [date, setDate] = useState<any>(() => {\n    var today: string | Date = new Date();\n    var dd = String(today.getDate()).padStart(2, \"0\");\n    var mm = String(today.getMonth() + 1).padStart(2, \"0\"); //January is 0!\n    var yyyy = today.getFullYear();\n    today = yyyy + \"-\" + mm + \"-\" + dd;\n    return(\n      today\n    )\n  });\n  const [editId, setEditID] = useState<string>(\"\");\n  const [comment, setComment] = useState<string>(\"\");\n  const [cardName, setCardName] = useState<string>(\"\");\n  const [modalType, setModalType] = useState<any>();\n  const [state, setState] = useState<any>({\n    todo: {\n      title: \"Todo\",\n      items: [item],\n    },\n    inprogress: {\n      title: \"Progress\",\n      items: [],\n    },\n    done: {\n      title: \"Completed\",\n      items: [],\n    },\n  });\n\n  useEffect(() => {\n    var today: string | Date = new Date();\n    var dd = String(today.getDate()).padStart(2, \"0\");\n    var mm = String(today.getMonth() + 1).padStart(2, \"0\"); //January is 0!\n    var yyyy = today.getFullYear();\n\n    today = yyyy + \"-\" + mm + \"-\" + dd;\n    $(\"#minDate\").attr(\"min\", today);\n    // setDate(today);\n  });\n\n  \n\n  const handleDragEnd = ({ destination, source }: any) => {\n    if (!destination) {\n      return;\n    }\n    if (\n      destination.index === source.index &&\n      destination.droppableId === source.droppableId\n    ) {\n      return;\n    }\n\n    // Creating a copy of item before removing it from state\n    const itemCopy = { ...state[source.droppableId].items[source.index] };\n\n    var prev = { ...state };\n    prev[source.droppableId].items.splice(source.index, 1);\n    prev[destination.droppableId].items.splice(destination.index, 0, itemCopy);\n    setState(prev);\n  };\n\n  const handleChangeTextFields = (e: ChangeEvent<HTMLTextAreaElement>) => {\n    setNewItemModal(e.target.value);\n  };\n  const handleDateChange = (e: ChangeEvent<HTMLInputElement>) => {\n    setDate(e.target.value);\n  };\n  const handleChangeCommentField = (e: ChangeEvent<HTMLInputElement>) => {\n    setComment(e.target.value);\n  };\n  const handleCardChange = (e: ChangeEvent<HTMLInputElement>) => {\n    setCardName(e.target.value);\n  };\n\n  const editSubmitModal = (id: any) => {\n    setDate(\"2020-11-30\");\n    if (newItemModal !== \"\") {\n      setNewItemModal(\"\");\n      var editState = state;\n      editState.todo.items.map((item: any) => {\n        if (item.id === id) {\n          item.name = newItemModal;\n          item.date = date;\n        }\n      });\n      editState.inprogress.items.map((item: any) => {\n        if (item.id === id) {\n          item.name = newItemModal;\n          item.date = date;\n        }\n      });\n      editState.done.items.map((item: any) => {\n        if (item.id === id) {\n          item.name = newItemModal;\n          item.date = date;\n        }\n      });\n      setState(editState);\n      $(`#${id + \"div\"}`).hide();\n      setComment(\"\");\n      $(\"#myModal\").hide();\n    } else {\n      alert(\"Please Enter Something\");\n    }\n  };\n\n  const closeModal = () => {\n    $(\"#myModal\").hide();\n  };\n\n  const openModal = (e: any) => {\n    $(\"#myModal\").show();\n    var str = e.target.id;\n\n    // console.log(e.target.\"data-Id\")\n    console.log($(`#${str}`).attr(\"data-id\"));\n    setModalType($(`#${str}`).attr(\"data-id\"));\n\n    str.replace(\"todo\", \"\");\n    setEditID(str);\n\n    setNewItemModal($(`#${str + \"todo\"}`).html());\n  };\n\n  const addComment = (id: any) => {\n    if (comment !== \"\") {\n      var editState = state;\n      editState.todo.items.map((item: any) => {\n        if (item.id === id) {\n          item.comments.push({\n            Name:\n              $('input[name=\"gender\"]:checked').val() === undefined\n                ? \"Unknown User\"\n                : $('input[name=\"gender\"]:checked').val(),\n            commment: comment,\n          });\n        }\n      });\n      editState.inprogress.items.map((item: any) => {\n        if (item.id === id) {\n          item.comments.push({\n            Name:\n              $('input[name=\"gender\"]:checked').val() === undefined\n                ? \"Unknown User\"\n                : $('input[name=\"gender\"]:checked').val(),\n            commment: comment,\n          });\n        }\n      });\n      editState.done.items.map((item: any) => {\n        if (item.id === id) {\n          item.comments.push({\n            Name:\n              $('input[name=\"gender\"]:checked').val() === undefined\n                ? \"Unknown User\"\n                : $('input[name=\"gender\"]:checked').val(),\n            commment: comment,\n          });\n        }\n      });\n      setState(editState);\n      $(`#${id + \"div\"}`).hide();\n      setComment(\"\");\n    } else {\n      alert(\"Please Enter Something\");\n    }\n  };\n\n  const addCard = (title: any) => {\n    $(`#${title + \"add-card-div\"}`).show();\n  };\n\n  const submitAddCard = (title: any) => {\n    if (cardName !== \"\") {\n      $(`#${title + \"add-card-div\"}`).hide();\n      if (title === \"Todo\") {\n        setState((prev: any) => {\n          return {\n            ...prev,\n            todo: {\n              title: \"Todo\",\n              items: [\n                {\n                  id: v4(),\n                  name: cardName,\n                  date: date,\n                  comments: [],\n                },\n                ...prev.todo.items,\n              ],\n            },\n          };\n        });\n      } else if (title === \"Progress\") {\n        setState((prev: any) => {\n          return {\n            ...prev,\n            inprogress: {\n              title: \"Progress\",\n              items: [\n                {\n                  id: v4(),\n                  name: cardName,\n                  date: date,\n                  comments: [],\n                },\n                ...prev.inprogress.items,\n              ],\n            },\n          };\n        });\n      } else {\n        setState((prev: any) => {\n          return {\n            ...prev,\n            done: {\n              title: \"Completed\",\n              items: [\n                {\n                  id: v4(),\n                  name: cardName,\n                  date: date,\n                  comments: [],\n                },\n                ...prev.done.items,\n              ],\n            },\n          };\n        });\n      }\n    } else {\n      alert(\"Please Enter Something\");\n    }\n    setCardName(\"\");\n  };\n\n  return (\n    <div>\n      <h1 className=\"app-title\">TypeScript trello Table</h1>\n      <div id=\"myModal\" className=\"modal\">\n        {/* <!-- Modal content --> */}\n        <div className=\"modal-content\">\n          <span className=\"close\" onClick={closeModal}>\n            &times;\n          </span>\n          <div className=\"modal-container\">\n            <textarea\n              className=\"card-text\"\n              value={newItemModal}\n              onChange={handleChangeTextFields}\n            ></textarea>\n            <br />\n            <span>Due Date :</span>\n            <input\n              id=\"minDate\"\n              type=\"date\"\n              value={date}\n              onChange={handleDateChange}\n            />\n            <br />\n            <h4>Comments:</h4>\n\n            {modalType === \"Todo\"\n              ? state.todo.items.map((item: any) => {\n                  if (editId === item.id) {\n                    return item.comments.map((text: any, index: any) => (\n                      <div className=\"comment-dev\" key={index + 1}>\n                        <p className=\"comment-text\">\n                          <span>{text.Name + \" :\"} </span>\n                          {text.commment}\n                        </p>\n                      </div>\n                    ));\n                  } else {\n                    return null;\n                  }\n                })\n              : null}\n            {modalType === \"Progress\"\n              ? state.inprogress.items.map((item: any) => {\n                  if (editId === item.id) {\n                    return item.comments.map((text: any, index: any) => (\n                      <div className=\"comment-dev\" key={index + 1}>\n                        <p className=\"comment-text\">\n                          <span>{text.Name + \" :\"} </span>\n                          {text.commment}\n                        </p>\n                      </div>\n                    ));\n                  } else {\n                    return null;\n                  }\n                })\n              : null}\n            {modalType === \"Completed\"\n              ? state.done.items.map((item: any) => {\n                  if (editId === item.id) {\n                    return item.comments.map((text: any, index: any) => (\n                      <div className=\"comment-dev\" key={index + 1}>\n                        <p className=\"comment-text\">\n                          <span>{text.Name + \" :\"} </span>\n                          {text.commment}\n                        </p>\n                      </div>\n                    ));\n                  } else {\n                    return null;\n                  }\n                })\n              : null}\n            <div className=\"comment-dev\">\n              <p className=\"comment-text\">\n                <span>User : </span>Demo Comment\n              </p>\n            </div>\n            <h4>Add Comments: </h4>\n            <p>Please select your Name:</p>\n            <input type=\"radio\" id=\"Sourav\" name=\"gender\" value=\"Sourav\" />\n            <label>Sourav</label>\n            <input type=\"radio\" id=\"Sourav\" name=\"gender\" value=\"Riya\" />\n            <label>Riya</label>\n            <br />\n            <input\n              type=\"text\"\n              id=\"comment\"\n              value={comment}\n              placeholder=\"Add Comments...\"\n              onChange={handleChangeCommentField}\n            ></input>\n            <br />\n            <button className=\"button\" onClick={() => addComment(editId)}>\n              <span>Submit</span>\n            </button>\n            <br />\n            <a className=\"button3\" onClick={() => editSubmitModal(editId)}>\n              Save\n            </a>\n          </div>\n        </div>\n      </div>\n      <div className=\"container\" style={{ textAlign: \"center\" }}></div>\n      <div className=\"drang-n-drop\">\n        <DragDropContext onDragEnd={handleDragEnd}>\n          {_.map(state, (data, key) => {\n            return (\n              <div key={key} className={\"column\"}>\n                <h2 style={{ color: \"white\" }}>{data.title}</h2>\n                <Droppable droppableId={key}>\n                  {(provided, snapshot) => {\n                    return (\n                      <div\n                        ref={provided.innerRef}\n                        {...provided.droppableProps}\n                        className={\"droppable-col\"}\n                      >\n                        {data.items.map((el: any, index: any) => {\n                          return (\n                            <Draggable\n                              key={el.id}\n                              index={index}\n                              draggableId={el.id}\n                            >\n                              {(provided, snapshot) => {\n                                return (\n                                  <div\n                                    className={`item ${\n                                      snapshot.isDragging && \"dragging\"\n                                    }`}\n                                    ref={provided.innerRef}\n                                    {...provided.draggableProps}\n                                    {...provided.dragHandleProps}\n                                    data-id={data.title}\n                                    id={el.id}\n                                    onClick={(e) => openModal(e)}\n                                  >\n                                    <label id={el.id + \"todo\"}>{el.name}</label>\n                                    <br />\n                                    <label\n                                      id={el.id + \"date\"}\n                                      className=\"date-label\"\n                                    >\n                                      DueDate :{\" \"}\n                                      {el.date === \"\" ? \"2020-11-27\" : el.date}{\" \"}\n                                    </label>\n                                  </div>\n                                );\n                              }}\n                            </Draggable>\n                          );\n                        })}\n                        <div className=\"card-composer-container js-card-composer-container\">\n                          <a\n                            className=\"open-card-composer js-open-card-composer\"\n                            onClick={() => addCard(data.title)}\n                          >\n                            <span className=\"icon-sm icon-add\"></span>\n                            <span className=\"js-add-another-card\">\n                              Add a card\n                            </span>\n                          </a>\n                        </div>\n                        <div\n                          id={data.title + \"add-card-div\"}\n                          style={{ display: \"none\" }}\n                        >\n                          <input\n                            type=\"text\"\n                            className=\"card-txt\"\n                            onChange={handleCardChange}\n                            value={cardName}\n                          />\n                          <button\n                            type=\"submit\"\n                            className=\"card-submit\"\n                            onClick={() => submitAddCard(data.title)}\n                          >\n                            Submit\n                          </button>\n                        </div>\n                        {provided.placeholder}\n                      </div>\n                    );\n                  }}\n                </Droppable>\n              </div>\n            );\n          })}\n        </DragDropContext>\n      </div>\n    </div>\n  );\n}\nexport default App;\n","C:\\Users\\SOURAV\\Desktop\\CT Solutions Internship\\TypeScript Practice\\trello-table\\src\\reportWebVitals.ts",[],"C:\\Users\\SOURAV\\Desktop\\CT Solutions Internship\\TypeScript Practice\\trello-table\\src\\index.tsx",[],{"ruleId":"26","severity":1,"message":"27","line":8,"column":11,"nodeType":"28","messageId":"29","endLine":8,"endColumn":17},{"ruleId":"26","severity":1,"message":"30","line":24,"column":11,"nodeType":"28","messageId":"29","endLine":24,"endColumn":18},{"ruleId":"31","severity":1,"message":"32","line":39,"column":7,"nodeType":"28","messageId":"33","endLine":39,"endColumn":11},{"ruleId":"34","severity":1,"message":"35","line":128,"column":44,"nodeType":"36","messageId":"37","endLine":128,"endColumn":46},{"ruleId":"34","severity":1,"message":"35","line":134,"column":50,"nodeType":"36","messageId":"37","endLine":134,"endColumn":52},{"ruleId":"34","severity":1,"message":"35","line":140,"column":44,"nodeType":"36","messageId":"37","endLine":140,"endColumn":46},{"ruleId":"34","severity":1,"message":"35","line":176,"column":44,"nodeType":"36","messageId":"37","endLine":176,"endColumn":46},{"ruleId":"34","severity":1,"message":"35","line":187,"column":50,"nodeType":"36","messageId":"37","endLine":187,"endColumn":52},{"ruleId":"34","severity":1,"message":"35","line":198,"column":44,"nodeType":"36","messageId":"37","endLine":198,"endColumn":46},{"ruleId":"38","severity":1,"message":"39","line":383,"column":13,"nodeType":"40","endLine":383,"endColumn":76},{"ruleId":"38","severity":1,"message":"39","line":440,"column":27,"nodeType":"40","endLine":443,"endColumn":28},"@typescript-eslint/no-unused-vars","'IProps' is defined but never used.","Identifier","unusedVar","'DataSet' is defined but never used.","@typescript-eslint/no-redeclare","'item' is already defined.","redeclared","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement"]